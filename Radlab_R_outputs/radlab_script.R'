meta <- read.delim(file = "radiation_lab_metadata.txt", sep = "\t") #R automatically changes any columns with the same name 
colnames(meta)[colnames(meta) == 'sample.id'] <- 'sample-id' #R automatically changes the name of the first column to "sample.id", however the qiime 
# code is not compatible with this column name so it must be changed back 
write.table(meta, file="radiation_lab_metadata.txt", sep="\t", quote=FALSE, row.names = FALSE)


library(tidyverse)
library(ape)
library(phyloseq)
library(indicspecies)
library(microbiome)
library(ggVennDiagram)
library(picante)
library(ggpubr)
library(ggtext)


#file path for loadding data 
metafp <- "radiation_lab_metadata.txt"
meta <- read_delim(metafp, delim="\t")
otufp <- "exports/feature-table.txt"
otu <- read_delim(file = otufp, delim="\t", skip=1)
taxfp <- "exports/taxonomy.tsv"
tax <- read_delim(taxfp, delim="\t")
phylotreefp <- "exports/tree.nwk"
phylotree <- read.tree(phylotreefp)

#Table formats

# OTU tables should be a matrix with rownames and colnames as OTUs and sample IDs
otu_mat <- as.matrix(otu[, -1]) 
rownames(otu_mat) <- otu$`#OTU ID`  
OTU <- otu_table(otu_mat, taxa_are_rows = TRUE)  

#### Format sample metadata #### properly
# Save everything except sampleid as new data frame
samp_df <- as.data.frame(meta[,-1])
# Make sampleids the rownames
rownames(samp_df)<- meta$'sample-id'
# Make phyloseq sample data with sample_data() function
SAMP <- sample_data(samp_df)


#### Formatting taxonomy ####
# Convert taxon strings to a table with separate taxa rank columns
tax_mat <- tax %>% select(-Confidence)%>%
  separate(col=Taxon, sep="; "
           , into = c("Domain","Phylum","Class","Order","Family","Genus","Species")) %>%
  as.matrix() # Saving as a matrix
# Save everything except feature IDs 
tax_mat <- tax_mat[,-1]
# Make sampleids the rownames
rownames(tax_mat) <- tax$`Feature ID`
# Make taxa table
TAX <- tax_table(tax_mat)
class(TAX)

#phyloseq object
radseq <- phyloseq(OTU, SAMP, TAX, phylotree)

#rarefied to 49479
radseq_rare <- rarefy_even_depth(radseq, rngseed = 1, sample.size = 49479)


#Convert to relative abundance
radseq_RA <- transform_sample_counts(radseq, fun=function(x) x/sum(x))

#ISA
isa_rad <- multipatt(t(otu_table(radseq_RA)), cluster = sample_data(radseq_RA)$`ionizing_radiation`)
summary(isa_rad)

# Extract taxonomy table
taxtable <- tax_table(radseq_RA) %>% as.data.frame() %>% rownames_to_column(var="ASV")

# Merge taxonomy table with phyloseq object and filter by significant p-value
res <- isa_rad$sign %>%
  rownames_to_column(var="ASV") %>%
  left_join(taxtable) %>%
  filter(p.value <= 0.05) 

# View results
View(res)

write.csv(res, "filtered_radlab_isa.csv", row.names = FALSE)

#CORE MICROBIOME
radseq_rad <- subset_samples(radseq_RA, `ionizing_radiation`=="Irradiated with 16 O")
radseq_sham <- subset_samples(radseq_RA, `ionizing_radiation`=="Sham-irradiated")

# What ASVs are found in more than 70% of samples in each radiation usage category?
# trying changing the prevalence to see what happens
sham_ASVs <- core_members(radseq_sham, detection=0, prevalence = 0.7)
rad_ASVs <- core_members(radseq_rad, detection=0, prevalence = 0.7)

tax_table(prune_taxa(sham_ASVs,radseq))
tax_table(prune_taxa(rad_ASVs,radseq))

# can plot those ASVs' relative abundance
prune_taxa(rad_ASVs,radseq_RA) %>% 
  plot_bar(fill="Species") + 
  facet_wrap(.~`ionizing_radiation`, scales ="free")

prune_taxa(sham_ASVs,radseq_RA) %>% 
  plot_bar(fill="Species") + 
  facet_wrap(.~`ionizing_radiation`, scales ="free")


sham_list <- core_members(radseq_sham , detection=0.001, prevalence = 0.1)
rad_list <- core_members(radseq_rad, detection=0.001, prevalence = 0.1)

radlab_list_full <- list(Sham = sham_list, Radiation = rad_list)

# Create a Venn diagram using all the ASVs shared and unique to radiation exposure
first_venn <- ggVennDiagram(x = radlab_list_full)
first_venn

ggsave("venn_radlab.png", first_venn)


# Extract ASVs unique to radiation exposure 
rad_unique <- setdiff(rad_list, sham_list)


# convert rad_unique list to datafram
core_rad_unique_df <- data.frame(rad_unique)
colnames(core_rad_unique_df)[1] <- "ASV"

#create df with only indicators of radiation from isa
rad_isa <- res %>%
  filter(`s.Irradiated with 16 O` == 1)

#inner join to select for ASVs that are in both
core_isa_rad <- inner_join(core_rad_unique_df, rad_isa, by = "ASV")

#same asv 
write.csv(core_isa_rad , "core_isa_radlab.csv", row.names = FALSE)


## CREATE BUBBLE PLOT
# Extract OTU table as a matrix
otu_relative_matrix <- as(otu_table(radseq_RA), "matrix")

# Convert to data frame
otu_relative_df <- as.data.frame(otu_relative_matrix)
otu_relative_df

# Define ASVs
target_asvs <- c("f64f55b1af9b863086103dbf76e94e9f", "75bd82a728427b9fe0161be3977a9dee", 
                 "003a296ba4c55f34d62c224bda66f5a9", "e3811dd729c742150d8c1c5f6e40c5a9", 
                 "c8738b09261f9ea1f3414e16667fac02", "226ab97195d19858d059fffaef17f5d7", 
                 "7b77d7b0590befdb68266063cee250a0", "9e31424bebb25a100572229efc973274", 
                 "bbc2bc36c756cc8b1509b77eba2ac381")

# Filter to include only target ASVs
target_relative_abundance <- otu_relative_df[rownames(otu_relative_df) %in% target_asvs, ]

# Calculate mean relative abundance across all samples for each target ASV
mean_relative_abundance <- rowMeans(target_relative_abundance)
mean_relative_abundance

# Convert data frame for plotting
final_data_frame <- data.frame(
  ASV = paste("ASV", seq_along(mean_relative_abundance)),  
  RelativeAbundance = mean_relative_abundance
)

# Create data frame for "RadSpace" with zero relative abundance
radspace_data_frame <- data.frame(
  ASV = paste("ASV", seq_along(mean_relative_abundance)),  
  RelativeAbundance = 0,  
  Group = "RadSpace"
)

# Add group column to existing "RadLab"
final_data_frame <- final_data_frame %>%
  mutate(Group = "RadLab")

# Combine data frames
combined_data_frame <- bind_rows(final_data_frame, radspace_data_frame)

# custom sizes for legend
custom_sizes <- c(
  0, min(final_data_frame$RelativeAbundance), 0.5, max(final_data_frame$RelativeAbundance)
)

# Create bubble plot
bubble_plot <- ggplot(combined_data_frame, 
                      aes(x = Group, y = ASV, size = RelativeAbundance)) +
  geom_point(shape = 21, color = "black") +
  xlim(c("RadLab", "RadSpace")) +
  scale_size_continuous(
    range = c(1, 5000 * max(final_data_frame$RelativeAbundance)), 
    breaks = custom_sizes, 
    labels = c("0%", scales::percent_format()(custom_sizes[-1]))
  ) +
  labs(x = "Group", y = "", size = "Relative Abundance") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.y = element_text(face = "italic")) +
  theme(axis.text.x = element_text(face = "bold"),
        axis.ticks.x = element_blank(),
        axis.text.y = element_markdown())

print(bubble_plot)

ggsave("bubble_plot_pdf", plot = bubble_plot, width = 8, height = 6, dpi = 300, device = 'pdf')
ggsave("bubble_plot", plot = bubble_plot, width = 5, height = 6, dpi = 300, device = 'png')

##CREATING TABLE FOR K-N CLASSIFIER

# get asv_matrix and metadata from relative abundance phyloseq object

RA_asv_table <- as.data.frame(otu_table(radseq_RA))
metadata <- as.data.frame(sample_data(radseq_RA))

view(RA_asv_table)
view(metadata)

#transpose otu_mat so asvid are columns and sites are row names with values as realtive abundance of that asv at that site
RA_asv_table <- t(RA_asv_table)

#filter metadata table so only "ionizing_radiation" column remains (rownames are still sites)
rad_or_not <- metadata[, "ionizing_radiation", drop = FALSE]

view(rad_or_not)

#merge RA_asv_table to rad_or_not by rownames(sites) to create kn_class_df table
kn_class_df <- merge(RA_asv_table, rad_or_not, by = "row.names") 

#rename first column from Row,names to SampleID
colnames(kn_class_df)[colnames(kn_class_df) == "Row.names"] <- "SampleID"

view(kn_class_df)

#save as a csv
write.csv(kn_class_df, "kn_class_table.csv", row.names = FALSE)

##CREATING KNN MODEL
library(tidyverse)
library(tidymodels)
library(knitr)
library(kknn)

#Reading in kn_class table from radlab data
knn <- "kn_class.csv"
knn_data <- read_csv(knn)
knn_data <- knn_data[,-1]


#Renaming ionizing radiation classes and converting them to factors
knn_asv_data <- knn_data %>%
                mutate(ionizing_radiation = ifelse(ionizing_radiation == "Irradiated with 16 O", "Y", "N")) %>%
                mutate(ionizing_radiation = as_factor(ionizing_radiation))

#Set seed for reproducability 
set.seed(123)

#Split data into training and testing data
knn_asv_split <- initial_split(knn_asv_data, prop = 0.75, strata = ionizing_radiation)
knn_asv_train <- training(knn_asv_split)
knn_asv_test <- testing(knn_asv_split)

#Creating knn recipe with all predictors scaled to have a mean of 0. This recipe uses
#all ASVs as predictors for radiation exposure. 
knn_asv_recipe <- recipe(ionizing_radiation ~ ., data = knn_asv_train) %>%
  step_center(all_predictors())

#Create a tibble of integers from 1 - 30 to optimize k value for the model 
k_values <- tibble(neighbors = seq(from = 1, to = 30, by = 1))

#Performing 5-fold cross validation 
knn_asv_vfold <- vfold_cv(knn_asv_train, v = 5, strata = ionizing_radiation)

#Create model specification for tuning neighbours 
knn_asv_spec <- nearest_neighbor(weight_func = "rectangular", neighbors = tune()) %>%
  set_engine("kknn") %>%
  set_mode("classification")

#Testing for optimal number of neighbours (k-value)
knn_asv_results <- workflow() %>%
  add_recipe(knn_asv_recipe) %>%
  add_model(knn_asv_spec) %>%
  tune_grid(resamples = knn_asv_vfold, grid = k_values) %>%
  collect_metrics()

#Filtering for accuracy 
knn_asv_accuracy <- knn_asv_results %>%
  filter(.metric == "accuracy")

#Plotting accuracy estimate vs number of neighbours 
knn_asv_k_plot <- knn_asv_accuracy %>%
  ggplot(aes(x = neighbors, y = mean)) + 
  geom_line() + 
  labs(x = "Neighbors", y = "Accuracy Estimate") +
  ggtitle("Estimated Accuracy versus Number of Neighbours") +
  theme(text = element_text(size = 20)) +
  scale_x_continuous(breaks = seq(1, 30, by = 2))
knn_asv_k_plot

#Saving knn_asv_kplot
ggsave(file = "knn_asv_k_plot.png",
       plot = knn_asv_k_plot,
       height=8, width=12)

#Create new model specification using optimal number of neigbours: k = 5
knn_asv_spec <- nearest_neighbor(weight_func = "rectangular", neighbors = 5) %>%
  set_engine("kknn") %>%
  set_mode("classification")

#Fitting the model 
knn_asv_fit <- workflow() %>%
  add_recipe(knn_asv_recipe) %>%
  add_model(knn_asv_spec) %>%
  fit(data = knn_asv_train)

#Use test data to predict unknown samples to test model accuracy
knn_asv_prediction <- predict(knn_asv_fit, knn_asv_test) %>%
  bind_cols(knn_asv_test) %>%
  metrics(truth = ionizing_radiation, estimate = .pred_class) %>%
  filter(.metric == "accuracy")

#Display model accuracy
kable(knn_asv_prediction, caption = "Model Accuracy")

##PERFORMING KNN USING ONLY 9 ASVS FROM CORE MICROBIOME/ISA OVERLAP

#Reading in kn_class table from radlab data

#Renaming ionizing radiation classes and converting them to factors, filter for 9 ASVs of interest 
knn_coreisa_data <- knn_data %>%
  mutate(ionizing_radiation = ifelse(ionizing_radiation == "Irradiated with 16 O", "Y", "N")) %>%
  mutate(ionizing_radiation = as_factor(ionizing_radiation)) %>%
  select(f64f55b1af9b863086103dbf76e94e9f, `003a296ba4c55f34d62c224bda66f5a9`, 
         f9f60c2b7142924f5bf6369037234212, e3811dd729c742150d8c1c5f6e40c5a9,
         c8738b09261f9ea1f3414e16667fac02, `226ab97195d19858d059fffaef17f5d7`,
         `7b77d7b0590befdb68266063cee250a0`, `9e31424bebb25a100572229efc973274`,
         bbc2bc36c756cc8b1509b77eba2ac381, ionizing_radiation)

#Split data into training and testing data
knn_coreisa_split <- initial_split(knn_coreisa_data, prop = 0.75, strata = ionizing_radiation)
knn_coreisa_train <- training(knn_coreisa_split)
knn_coreisa_test <- testing(knn_coreisa_split)

#Creating knn recipe with all predictors scaled to have a mean of 0. This recipe uses
#only the 9 ASVs from the core microbiome/ISA overlap as predictors for radiation exposure. 
knn_coreisa_recipe <- recipe(ionizing_radiation ~ ., data = knn_coreisa_train) %>%
  step_center(all_predictors())

#Performing 5-fold cross validation 
knn_coreisa_vfold <- vfold_cv(knn_coreisa_train, v = 5, strata = ionizing_radiation)

#Create model specification for tuning neighbours 
knn_coreisa_spec <- nearest_neighbor(weight_func = "rectangular", neighbors = tune()) %>%
  set_engine("kknn") %>%
  set_mode("classification")

#Testing for optimal number of neighbours (k-value)
knn_coreisa_results <- workflow() %>%
  add_recipe(knn_coreisa_recipe) %>%
  add_model(knn_coreisa_spec) %>%
  tune_grid(resamples = knn_coreisa_vfold, grid = k_values) %>%
  collect_metrics()

#Filtering for accuracy 
knn_coreisa_accuracy <- knn_coreisa_results %>%
  filter(.metric == "accuracy")

#Plotting accuracy estimate vs number of neighbours
knn_coreisa_k_plot <- knn_coreisa_accuracy %>%
  ggplot(aes(x = neighbors, y = mean)) + 
  geom_line() + 
  labs(x = "Neighbours", y = "Accuracy Estimate") +
  ggtitle("Estimated Accuracy versus Number of Neighbours") +
  theme(text = element_text(size = 20)) +
  scale_x_continuous(breaks = seq(1, 30, by = 2))
knn_coreisa_k_plot

#Saving knn_coreisa_kplot
ggsave(file = "knn_coreisa_k_plot.png",
       plot = knn_coreisa_k_plot,
       height=8, width=12)

#Create new model specification using optimal number of neigbours: k = 6
knn_coreisa_spec <- nearest_neighbor(weight_func = "rectangular", neighbors = 6) %>%
  set_engine("kknn") %>%
  set_mode("classification")

#Fitting the model 
knn_coreisa_fit <- workflow() %>%
  add_recipe(knn_coreisa_recipe) %>%
  add_model(knn_coreisa_spec) %>%
  fit(data = knn_coreisa_train)

#Use test data to predict unknown samples to test model accuracy
knn_coreisa_prediction <- predict(knn_coreisa_fit, knn_coreisa_test) %>%
  bind_cols(knn_coreisa_test) %>%
  metrics(truth = ionizing_radiation, estimate = .pred_class) %>%
  filter(.metric == "accuracy")

#Display model accuracy
kable(knn_coreisa_prediction, caption = "Model Accuracy")


library(picante)
library(ggpubr)

#PLOTTING FAITH DIVERSITY
#calculate faith as pd
phylo_dist <- pd(t(otu_table(radseq_rare)), phy_tree(radseq_rare), include.root = F)
 #add PD to metadata
sample_data(radseq_rare)$PD <- phylo_dist$PD

#plot metadata against PD
plot.pd <- ggplot(sample_data(radseq_rare), aes(x = ionizing_radiation, y = PD, fill = ionizing_radiation)) + 
  geom_boxplot() +
  theme_minimal(base_size = 14) + 
  scale_fill_manual(values = c('Sham-irradiated' = '#6baed6', 'Irradiated with 16 O' = '#fc9272')) +
  xlab("Radiation Exposure") +
  ggtitle("Comparison of Faith's Phylogenetic Diversity") +
  ylab('Phylogenetic Diversity') +
  theme(
    legend.position = 'none',  
    plot.title = element_text(hjust = 0.5, face = 'bold')) + 
  stat_compare_means(method = 't.test', label = 'p.format') 

plot.pd

#save the faith plot
ggsave("phylogenetic_diversity_plot.png", plot = plot.pd, width = 8, height = 6, dpi = 300, device = "png")


#UNWEIGHTED UNIFRAC PLOTS
#calculate distance matrix using unweighted unifrac method
beta_dm <- distance(radseq_rare, method='unifrac')
#perform pcoa on distance matrix
pcoa_unifrac <- ordinate(radseq_rare, method="PCoA", distance = beta_dm)
#permanova_test
beta_sig <-adonis2(beta_dm ~ sample_data(radseq_rare)$ionizing_radiation)
#plot it making sure colours match from faiths plot
gg_pcoa_unifrac <-plot_ordination(radseq_rare, pcoa_unifrac, color = 'ionizing_radiation') +
  geom_point(size = 2, alpha = 0.9) +
  theme_minimal(base_size = 15) +
  labs(
    title = 'PCoA Plot of Unweighted Unifrac',
  ) +
  guides(color = guide_legend(title = 'Radiation Exposure'))+
  theme(
    plot.title = element_text(hjust = 0.5, face = 'bold')
  ) +
  scale_color_manual(values = c('Sham-irradiated' = '#6baed6', 'Irradiated with 16 O' = '#fc9272'))

gg_pcoa_unifrac
 
#save the unifrac plot
ggsave("unwunifrac_beta_diversity.png", plot = gg_pcoa_unifrac, width = 8, height = 6, dpi = 300, device = 'png')



#FORMAT CORE_ISA TABLE FOR PRESENTATION
core_isa_prez<-read.csv("core_isa_radlab.csv")
#rename ASVS 1 to 9 and remove unnecessary column and prefixes
core_isa_prez$ASV <- paste("ASV", 1:length(core_isa_prez$ASV))
core_isa_prez <- core_isa_prez[, !colnames(core_isa_prez) %in% c('Kingdom', 'Phylum', 'Class', 'stat', 'p.value', 's.Irradiated.with.16.O', 's.Sham.irradiated', 'index')]
core_isa_prez$Order <- gsub("^o__", "", core_isa_prez$Order)
core_isa_prez$Family <- gsub("^f__", "", core_isa_prez$Family)
core_isa_prez$Genus <- gsub("^g__", "", core_isa_prez$Genus)
core_isa_prez$Species <- gsub("^s__", "", core_isa_prez$Species)
