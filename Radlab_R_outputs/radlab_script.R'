meta <- read.delim(file = "radiation_lab_metadata.txt", sep = "\t") #R automatically changes any columns with the same name 
colnames(meta)[colnames(meta) == 'sample.id'] <- 'sample-id' #R automatically changes the name of the first column to "sample.id", however the qiime 
# code is not compatible with this column name so it must be changed back 
write.table(meta, file="radiation_lab_metadata.txt", sep="\t", quote=FALSE, row.names = FALSE)


library(tidyverse)
library(ape)
library(phyloseq)
library(indicspecies)
library(microbiome)
library(ggVennDiagram)

#file path for loadding data 
metafp <- "radiation_lab_metadata.txt"
meta <- read_delim(metafp, delim="\t")
otufp <- "exports/feature-table.txt"
otu <- read_delim(file = otufp, delim="\t", skip=1)
taxfp <- "exports/taxonomy.tsv"
tax <- read_delim(taxfp, delim="\t")
phylotreefp <- "exports/tree.nwk"
phylotree <- read.tree(phylotreefp)

#Table formats

# OTU tables should be a matrix with rownames and colnames as OTUs and sample IDs
otu_mat <- as.matrix(otu[, -1]) 
rownames(otu_mat) <- otu$`#OTU ID`  
OTU <- otu_table(otu_mat, taxa_are_rows = TRUE)  


#### Format sample metadata ####
# Save everything except sampleid as new data frame
samp_df <- as.data.frame(meta[,-1])
# Make sampleids the rownames
rownames(samp_df)<- meta$'sample-id'
# Make phyloseq sample data with sample_data() function
SAMP <- sample_data(samp_df)



# Expand taxonomy into separate columns for each taxonomic rank
taxonomy_expanded <- tax %>%
  separate(Taxon, into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = "; ", fill = "right")  # Ensure there's a space after the semicolon

# Convert expanded taxonomy to a matrix
taxonomy_mat <- as.matrix(taxonomy_expanded[, -1])  
rownames(taxonomy_mat) <- taxonomy_expanded$`Feature ID`  
TAX <- tax_table(taxonomy_mat) 

#phyloseq object
radseq <- phyloseq(OTU, SAMP, TAX, phylotree)

#rarefied to 49479
radseq_rare <- rarefy_even_depth(radseq, rngseed = 1, sample.size = 49479)


#Convert to relative abundance
radseq_RA <- transform_sample_counts(radseq, fun=function(x) x/sum(x))

#ISA
isa_rad <- multipatt(t(otu_table(radseq_RA)), cluster = sample_data(radseq_RA)$`ionizing_radiation`)
summary(isa_rad)

# Extract taxonomy table
taxtable <- tax_table(radseq_RA) %>% as.data.frame() %>% rownames_to_column(var="ASV")

# Merge taxonomy table with phyloseq object and filter by significant p-value
res <- isa_rad$sign %>%
  rownames_to_column(var="ASV") %>%
  left_join(taxtable) %>%
  filter(p.value <= 0.05) 

# View results
View(res)

write.csv(res, "filtered_radlab_isa.csv", row.names = FALSE)


#CORE MICROBIOME
radseq_rad <- subset_samples(radseq_RA, `ionizing_radiation`=="Irradiated with 16 O")
radseq_sham <- subset_samples(radseq_RA, `ionizing_radiation`=="Sham-irradiated")

# What ASVs are found in more than 70% of samples in each radiation usage category?
# trying changing the prevalence to see what happens
sham_ASVs <- core_members(radseq_sham, detection=0, prevalence = 0.7)
rad_ASVs <- core_members(radseq_rad, detection=0, prevalence = 0.7)

tax_table(prune_taxa(sham_ASVs,radseq))
tax_table(prune_taxa(rad_ASVs,radseq))

# can plot those ASVs' relative abundance
prune_taxa(rad_ASVs,radseq_RA) %>% 
  plot_bar(fill="Species") + 
  facet_wrap(.~`ionizing_radiation`, scales ="free")
prune_taxa(sham_ASVs,radseq_RA) %>% 
  plot_bar(fill="Species") + 
  facet_wrap(.~`ionizing_radiation`, scales ="free")


sham_list <- core_members(radseq_sham , detection=0.001, prevalence = 0.10)
rad_list <- core_members(radseq_rad, detection=0.001, prevalence = 0.10)

radlab_list_full <- list(Sham = sham_list, Radiation = rad_list)

# Create a Venn diagram using all the ASVs shared and unique to radiation exposure
first_venn <- ggVennDiagram(x = radlab_list_full)


ggsave("venn_radlab.png", first_venn)

# Extract ASVs unique to radiation exposure 
rad_unique <- setdiff(rad_list, sham_list)
rad_unique

# convert rad_unique list to datafram
core_rad_unique_df <- data.frame(rad_unique)
colnames(core_rad_unique_df)[1] <- "ASV"

#create df with only indicators of radiation from isa
rad_isa <- res %>%
  filter(`s.Irradiated with 16 O` == 1)

#inner join to select for ASVs that are in both
core_isa_rad <- inner_join(core_rad_unique_df, rad_isa, by = "ASV")

#save asv 
write.csv(core_isa_rad , "core_isa_radlab.csv", row.names = FALSE)

## CREATE BUBBLE PLOT
# Extract the OTU table as a matrix
otu_relative_matrix <- as(otu_table(radseq_RA), "matrix")

# Convert to a data frame
otu_relative_df <- as.data.frame(otu_relative_matrix)
otu_relative_df

# Define ASVs
target_asvs <- c("f64f55b1af9b863086103dbf76e94e9f", "003a296ba4c55f34d62c224bda66f5a9", "f9f60c2b7142924f5bf6369037234212", "e3811dd729c742150d8c1c5f6e40c5a9", "c8738b09261f9ea1f3414e16667fac02", "226ab97195d19858d059fffaef17f5d7", "7b77d7b0590befdb68266063cee250a0", "9e31424bebb25a100572229efc973274", "bbc2bc36c756cc8b1509b77eba2ac381")

# Filter to include only target ASVs
target_relative_abundance <- otu_relative_df[rownames(otu_relative_df) %in% target_asvs, ]

# Calculate the mean relative abundance across all samples for each target ASV
mean_relative_abundance <- rowMeans(target_relative_abundance)
mean_relative_abundance

# Convert to data frame for plotting
final_data_frame <- data.frame(
  ASV = names(mean_relative_abundance),
  RelativeAbundance = mean_relative_abundance
)

# Create the bubble plot
bubble_plot <- ggplot(final_data_frame, 
                        aes(x = 0, y = ASV, size = RelativeAbundance)) +
  geom_point(shape = 21, color = "black") +
  xlim(-0.5, 0.5)+
  scale_size_continuous(range = c(5000*min(final_data_frame$RelativeAbundance), 5000*max(final_data_frame$RelativeAbundance)), breaks=c(min(final_data_frame$RelativeAbundance), 0.5, max(final_data_frame$RelativeAbundance)), 
                        labels = scales::percent_format()) +  # Adjust the range of bubble sizes
  labs(x = "", y = "", size = "Relative Abundance")+
  theme_bw()+
  theme(plot.title = element_text(hjust = 0.5),
        axis.text.y = element_text(face = "italic"))+
  theme(axis.text.x = element_blank(),  # Remove x-axis labels
        axis.ticks.x = element_blank(),
        axis.text.y = element_markdown())

print(bubble_plot)

##CREATING TABLE FOR K-N CLASSIFIER

# get asv_matrix and metadata from relative abundance phyloseq object

RA_asv_table <- as.data.frame(otu_table(radseq_RA))
metadata <- as.data.frame(sample_data(radseq_RA))

view(RA_asv_table)
view(metadata)

#transpose otu_mat so asvid are columns and sites are row names with values as realtive abundance of that asv at that site
RA_asv_table <- t(RA_asv_table)

#filter metadata table so only "ionizing_radiation" column remains (rownames are still sites)
rad_or_not <- metadata[, "ionizing_radiation", drop = FALSE]

view(rad_or_not)

#merge RA_asv_table to rad_or_not by rownames(sites) to create kn_class_df table
kn_class_df <- merge(RA_asv_table, rad_or_not, by = "row.names") 

#rename first column from Row,names to SampleID
colnames(kn_class_df)[colnames(kn_class_df) == "Row.names"] <- "SampleID"

view(kn_class_df)

#save as a csv
write.csv(kn_class_df, "kn_class_table.csv", row.names = FALSE)
